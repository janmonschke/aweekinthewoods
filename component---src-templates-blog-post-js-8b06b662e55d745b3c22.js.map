{"version":3,"sources":["webpack:///./src/components/blogpost-footer.js","webpack:///./src/templates/blog-post.js"],"names":["BlogPostFooter","date","data","author","site","siteMetadata","style","display","fixed","avatar","childImageSharp","alt","marginRight","rhythm","marginBottom","minWidth","borderRadius","imgStyle","scale","marginTop","BlogPostTemplate","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","cover","coverImg","className","description","excerpt","coverSrc","src","textAlign","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","pageQuery"],"mappings":"0oDAoEeA,EAvDQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClBC,EAAI,OAiBFC,EAAWD,EAAKE,KAAKC,aAArBF,OACR,OACE,yBACEG,MAAO,CACLC,QAAQ,SAGV,kBAAC,IAAD,CACEC,MAAON,EAAKO,OAAOC,gBAAgBF,MACnCG,IAAKR,EACLG,MAAO,CACLM,YAAaC,YAAO,IACpBC,aAAc,EACdC,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,uBAAGV,MAAO,CAAEQ,aAAc,IAA1B,cACa,gCAASX,GADtB,kFAGE,uBACEG,MAAK,iBACAY,aAAM,IADN,CAEHJ,aAAc,EACdK,UAAWN,YAAO,OAJtB,iBAOiBZ,M,4ECYVmB,UA/DU,SAAC,GAAqC,IAAnClB,EAAkC,EAAlCA,KAAMmB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOrB,EAAKsB,eACZC,EAAYvB,EAAKE,KAAKC,aAAaqB,MACjCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAH0C,EAI7BL,EAAKM,YAA5BC,EAJoD,EAIpDA,MAAOJ,EAJ6C,EAI7CA,MAAOzB,EAJsC,EAItCA,KAChB8B,EAAWD,GAASA,EAAMpB,gBAAgBF,MAChD,OACE,kBAAC,IAAD,CAAQc,SAAUA,EAAUI,MAAOD,EAAWO,UAAU,YACtD,kBAAC,IAAD,CACEN,MAAOA,EACPO,YAAaV,EAAKW,QAClBC,SAAUJ,GAAYA,EAASK,MAEjC,iCACE,4BAAQ9B,MAAO,CAAE+B,UAAW,WAC1B,wBACE/B,MAAO,CACLa,UAAWN,YAAO,GAClBC,aAAcD,YAAO,KAGtBU,EAAKM,YAAYH,QAGtB,6BACEY,wBAAyB,CAAEC,OAAQhB,EAAKiB,MACxClC,MAAO,CAAEQ,aAAcD,YAAO,MAEhC,4BAAQP,MAAO,CAAEQ,aAAcD,YAAO,KACpC,kBAAC,EAAD,CAAgBZ,KAAMA,MAI1B,6BACE,wBACEK,MAAO,CACLC,QAAQ,OACRkC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGjB,GACC,kBAAC,OAAD,CAAMkB,GAAIlB,EAASmB,OAAOC,KAAMC,IAAI,QAApC,KACKrB,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMiB,GAAIjB,EAAKkB,OAAOC,KAAMC,IAAI,QAC7BpB,EAAKC,YAAYH,MADpB,WApDd,IAiEauB,EAAS","file":"component---src-templates-blog-post-js-8b06b662e55d745b3c22.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm, scale } from \"../utils/typography\"\n\nconst BlogPostFooter = ({ date }) => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 80, height: 80) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n        }\n      }\n    }\n  `)\n\n  const { author } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 80,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p style={{ marginBottom: 0 }}>\n        Written by <strong>{author}</strong>, an avid hiker living in Berlin,\n        which is way too far away from the mountains.\n        <p\n          style={{\n            ...scale(-1 / 10),\n            marginBottom: 0,\n            marginTop: rhythm(0.5),\n          }}\n        >\n          Published on: {date}\n        </p>\n      </p>\n    </div>\n  )\n}\n\nexport default BlogPostFooter\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport BlogPostFooter from \"../components/blogpost-footer\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nimport \"./blog-post.css\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n  const { cover, title, date } = post.frontmatter\n  const coverImg = cover && cover.childImageSharp.fixed\n  return (\n    <Layout location={location} title={siteTitle} className=\"blogPost\">\n      <SEO\n        title={title}\n        description={post.excerpt}\n        coverSrc={coverImg && coverImg.src}\n      />\n      <article>\n        <header style={{ textAlign: \"center\" }}>\n          <h1\n            style={{\n              marginTop: rhythm(2),\n              marginBottom: rhythm(2),\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          style={{ marginBottom: rhythm(2) }}\n        />\n        <footer style={{ marginBottom: rhythm(2) }}>\n          <BlogPostFooter date={date} />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 300)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        cover {\n          childImageSharp {\n            fixed {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}